require('dotenv').config();
const mongoose = require('mongoose');

// 1Ô∏è‚É£ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

// 2Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á Schema
const personSchema = new mongoose.Schema({
  name: { type: String, required: true },
  age: Number,
  favoriteFoods: [String]
});

// 3Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á Model
const Person = mongoose.model("Person", personSchema);

// 4Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
const createAndSavePerson = (done) => {
  const person = new Person({
    name: "John Doe",
    age: 25,
    favoriteFoods: ["Pizza", "Burger"]
  });

  person.save((err, data) => {
    if (err) return done(err);
    return done(null, data);
  });
};

// 5Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
const createManyPeople = (arrayOfPeople, done) => {
  Person.create(arrayOfPeople, (err, people) => {
    if (err) return done(err);
    return done(null, people);
  });
};

// 6Ô∏è‚É£ ‡∏´‡∏≤ people ‡πÇ‡∏î‡∏¢‡∏ä‡∏∑‡πà‡∏≠
const findPeopleByName = (personName, done) => {
  Person.find({ name: personName }, (err, peopleFound) => {
    if (err) return done(err);
    return done(null, peopleFound);
  });
};

// 7Ô∏è‚É£ ‡∏´‡∏≤ **‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß** ‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö
const findOneByFood = (food, done) => {
  Person.findOne({ favoriteFoods: food }, (err, personFound) => {
    if (err) return done(err);
    return done(null, personFound);
  });
};

// 8Ô∏è‚É£ ‡∏´‡∏≤ person ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≤‡∏° _id
const findPersonById = (personId, done) => {
  Person.findById(personId, (err, personFound) => {
    if (err) return done(err);
    return done(null, personFound);
  });
};

// 9Ô∏è‚É£ Classic Update: find -> edit -> save
const findEditThenSave = (personId, done) => {
  Person.findById(personId, (err, person) => {
    if (err) return done(err);
    if (!person) return done(new Error("Person not found"));

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° "hamburger" ‡πÉ‡∏ô favoriteFoods
    person.favoriteFoods.push("hamburger");

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å document ‡πÉ‡∏´‡∏°‡πà
    person.save((err, updatedPerson) => {
      if (err) return done(err);
      return done(null, updatedPerson);
    });
  });
};

// üîπ New Update: findOneAndUpdate
const findAndUpdate = (personName, done) => {
  Person.findOneAndUpdate(
    { name: personName }, // query
    { age: 20 },          // update
    { new: true },        // ‡∏Ñ‡∏∑‡∏ô document ‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    (err, updatedPerson) => {
      if (err) return done(err);
      return done(null, updatedPerson);
    }
  );
};

// üîπ Delete One Document by _id
const removeById = (personId, done) => {
  Person.findByIdAndRemove(personId, (err, removedPerson) => {
    if (err) return done(err);
    return done(null, removedPerson);
  });
};

// üîπ Delete Many Documents by name
const removeManyPeople = (nameToRemove, done) => {
  Person.deleteMany({ name: nameToRemove }, (err, result) => {
    if (err) return done(err);
    return done(null, result); // result.deletedCount ‡∏à‡∏∞‡∏ö‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏ö
  });
};

// 10Ô∏è‚É£ Export ‡πÉ‡∏´‡πâ FreeCodeCamp ‡πÉ‡∏ä‡πâ
exports.PersonModel = Person;
exports.createAndSavePerson = createAndSavePerson;
exports.createManyPeople = createManyPeople;
exports.findPeopleByName = findPeopleByName;
exports.findOneByFood = findOneByFood;
exports.findPersonById = findPersonById;
exports.findEditThenSave = findEditThenSave;
exports.findAndUpdate = findAndUpdate;
exports.removeById = removeById;
exports.removeManyPeople = removeManyPeople;