/********************************************
 * DO NOT EDIT THIS FILE
 * the verification process may break
 *******************************************/

// server.js
require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');

const app = express();
app.use(express.json());

// เชื่อม MongoDB Atlas
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => console.log("MongoDB connected!"))
.catch(err => console.log("MongoDB connection error:", err));

// สร้าง Schema และ Model
const personSchema = new mongoose.Schema({
  name: String,
  age: Number,
  favoriteFoods: [String]
});
const Person = mongoose.model("Person", personSchema);

// ==================== ตัวอย่าง CRUD ====================

// 1. Create & Save a Record
app.get("/create", async (req, res) => {
  const newPerson = new Person({ name: "John", age: 30, favoriteFoods: ["pizza", "pasta"] });
  try {
    const saved = await newPerson.save();
    res.send(saved);
  } catch(err) {
    res.status(500).send(err);
  }
});

// 2. Create Many Records
app.get("/create-many", async (req, res) => {
  const arrayOfPeople = [
    { name: "Alice", age: 25, favoriteFoods: ["apple"] },
    { name: "Bob", age: 28, favoriteFoods: ["banana"] }
  ];
  try {
    const data = await Person.create(arrayOfPeople);
    res.send(data);
  } catch(err) {
    res.status(500).send(err);
  }
});

// 3. Find people by name
app.get("/find/:name", async (req, res) => {
  try {
    const data = await Person.find({ name: req.params.name });
    res.send(data);
  } catch(err) {
    res.status(500).send(err);
  }
});

// 4. Find one by favorite food
app.get("/find-one/:food", async (req, res) => {
  try {
    const data = await Person.findOne({ favoriteFoods: req.params.food });
    res.send(data);
  } catch(err) {
    res.status(500).send(err);
  }
});

// 5. Find by ID
app.get("/find-id/:id", async (req, res) => {
  try {
    const data = await Person.findById(req.params.id);
    res.send(data);
  } catch(err) {
    res.status(500).send(err);
  }
});

// 6. Classic Update (Find, Edit, Save)
app.put("/update/:id", async (req, res) => {
  try {
    const person = await Person.findById(req.params.id);
    if(!person) return res.status(404).send("Not found");
    person.name = req.body.name || person.name;
    const updated = await person.save();
    res.send(updated);
  } catch(err) {
    res.status(500).send(err);
  }
});

// 7. Find One and Update
app.put("/find-one-update/:name", async (req, res) => {
  try {
    const updated = await Person.findOneAndUpdate(
      { name: req.params.name },
      { name: req.body.name },
      { new: true }
    );
    res.send(updated);
  } catch(err) {
    res.status(500).send(err);
  }
});

// 8. Delete One by ID
app.delete("/delete/:id", async (req, res) => {
  try {
    const removed = await Person.findByIdAndRemove(req.params.id);
    res.send(removed);
  } catch(err) {
    res.status(500).send(err);
  }
});

// 9. Delete Many by Name
app.delete("/delete-many/:name", async (req, res) => {
  try {
    const result = await Person.deleteMany({ name: req.params.name });
    res.send(result);
  } catch(err) {
    res.status(500).send(err);
  }
});

// 10. Chain Query Helpers
app.get("/chain/:food", async (req, res) => {
  try {
    const data = await Person.find({ favoriteFoods: req.params.food })
      .sort({ name: 1 })
      .limit(2)
      .exec();
    res.send(data);
  } catch(err) {
    res.status(500).send(err);
  }
});

// ========================================================

app.listen(5000, () => console.log("Your app is listening on port 5000"));

/********************************************
 * DO NOT EDIT THIS FILE
 * the verification process may break
 *******************************************/
